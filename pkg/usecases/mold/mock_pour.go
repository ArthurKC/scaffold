// Code generated by MockGen. DO NOT EDIT.
// Source: pour.go

// Package mold is a generated GoMock package.
package mold

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPourOutputPort is a mock of PourOutputPort interface
type MockPourOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockPourOutputPortMockRecorder
}

// MockPourOutputPortMockRecorder is the mock recorder for MockPourOutputPort
type MockPourOutputPortMockRecorder struct {
	mock *MockPourOutputPort
}

// NewMockPourOutputPort creates a new mock instance
func NewMockPourOutputPort(ctrl *gomock.Controller) *MockPourOutputPort {
	mock := &MockPourOutputPort{ctrl: ctrl}
	mock.recorder = &MockPourOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPourOutputPort) EXPECT() *MockPourOutputPortMockRecorder {
	return m.recorder
}

// RenderPourResponse mocks base method
func (m *MockPourOutputPort) RenderPourResponse(r *PourResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderPourResponse", r)
}

// RenderPourResponse indicates an expected call of RenderPourResponse
func (mr *MockPourOutputPortMockRecorder) RenderPourResponse(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderPourResponse", reflect.TypeOf((*MockPourOutputPort)(nil).RenderPourResponse), r)
}

// RenderPourError mocks base method
func (m *MockPourOutputPort) RenderPourError(e *PourError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderPourError", e)
}

// RenderPourError indicates an expected call of RenderPourError
func (mr *MockPourOutputPortMockRecorder) RenderPourError(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderPourError", reflect.TypeOf((*MockPourOutputPort)(nil).RenderPourError), e)
}
