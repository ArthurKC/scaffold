// Code generated by MockGen. DO NOT EDIT.
// Source: metal.go

// Package metal is a generated GoMock package.
package metal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInputPort is a mock of InputPort interface
type MockInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockInputPortMockRecorder
}

// MockInputPortMockRecorder is the mock recorder for MockInputPort
type MockInputPortMockRecorder struct {
	mock *MockInputPort
}

// NewMockInputPort creates a new mock instance
func NewMockInputPort(ctrl *gomock.Controller) *MockInputPort {
	mock := &MockInputPort{ctrl: ctrl}
	mock.recorder = &MockInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInputPort) EXPECT() *MockInputPortMockRecorder {
	return m.recorder
}

// Ask mocks base method
func (m *MockInputPort) Ask(p *Constituent) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask", p)
	ret0, _ := ret[0].(string)
	return ret0
}

// Ask indicates an expected call of Ask
func (mr *MockInputPortMockRecorder) Ask(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockInputPort)(nil).Ask), p)
}

// MockOutputPort is a mock of OutputPort interface
type MockOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockOutputPortMockRecorder
}

// MockOutputPortMockRecorder is the mock recorder for MockOutputPort
type MockOutputPortMockRecorder struct {
	mock *MockOutputPort
}

// NewMockOutputPort creates a new mock instance
func NewMockOutputPort(ctrl *gomock.Controller) *MockOutputPort {
	mock := &MockOutputPort{ctrl: ctrl}
	mock.recorder = &MockOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOutputPort) EXPECT() *MockOutputPortMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockOutputPort) Write(path, content string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", path, content)
}

// Write indicates an expected call of Write
func (mr *MockOutputPortMockRecorder) Write(path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOutputPort)(nil).Write), path, content)
}

// DestDir mocks base method
func (m *MockOutputPort) DestDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DestDir indicates an expected call of DestDir
func (mr *MockOutputPortMockRecorder) DestDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestDir", reflect.TypeOf((*MockOutputPort)(nil).DestDir))
}

// MockMoldSource is a mock of MoldSource interface
type MockMoldSource struct {
	ctrl     *gomock.Controller
	recorder *MockMoldSourceMockRecorder
}

// MockMoldSourceMockRecorder is the mock recorder for MockMoldSource
type MockMoldSourceMockRecorder struct {
	mock *MockMoldSource
}

// NewMockMoldSource creates a new mock instance
func NewMockMoldSource(ctrl *gomock.Controller) *MockMoldSource {
	mock := &MockMoldSource{ctrl: ctrl}
	mock.recorder = &MockMoldSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMoldSource) EXPECT() *MockMoldSourceMockRecorder {
	return m.recorder
}

// Constituents mocks base method
func (m *MockMoldSource) Constituents() []*Constituent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Constituents")
	ret0, _ := ret[0].([]*Constituent)
	return ret0
}

// Constituents indicates an expected call of Constituents
func (mr *MockMoldSourceMockRecorder) Constituents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Constituents", reflect.TypeOf((*MockMoldSource)(nil).Constituents))
}

// Paths mocks base method
func (m *MockMoldSource) Paths() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Paths indicates an expected call of Paths
func (mr *MockMoldSourceMockRecorder) Paths() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockMoldSource)(nil).Paths))
}

// Source mocks base method
func (m *MockMoldSource) Source(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source
func (mr *MockMoldSourceMockRecorder) Source(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockMoldSource)(nil).Source), path)
}
